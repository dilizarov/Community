var Avatar = React.createClass({

  getInitialState: function() {
    return {
      loadSucceeded: null,
      loadFailed: null,
      cropper_source: null,
      preview: null,
    }
  },

  makeVisible: function() {

    this.setState({
      loadSucceeded: true
    })
  },

  usePlaceholder: function() {
    this.setState({
      loadFailed: true
    })
  },

  openImageChooser: function() {
    this.refs.photopicker.click();
  },

  cropImageUI: function() {
    var input = this.refs.photopicker

    if (input.files && input.files[0]) {
      var reader = new FileReader();

      var that = this;

      reader.onload = function (e) {
        that.setState({
          cropper_source: reader.result
        }, function() {
          that.refs.modal.show();
        })
      }

      reader.readAsDataURL(input.files[0])
    }
  },

  commandClicked: function() {
    if (this.props.handleChange) {
      this.props.handleChange(this.refs.cropper.getCroppedCanvas().toDataURL())
      this.refs.modal.hide();
    } else {

      this.setState({
        changingAvatar: true,
        saveButtonWidth: ReactDOM.findDOMNode(this.refs.save_button).getBoundingClientRect().width
      })

      var dataURI = this.refs.cropper.getCroppedCanvas().toDataURL();

      var blob = this.dataURItoBlob(dataURI);

      var formData = new FormData();

      formData.append("avatar", blob, "avatar_img.png");

      $.ajax({
        url: "/api/v1/users/" + Session.userId() + "/profile_pic.json?auth_token=" + Session.authToken(),
        data: formData,
        processData: false,
        contentType: false,
        type: "POST",
        success: function(data) {

          Session.changeAvatar(data.avatar.url);

          this.setState({
            changingAvatar: false,
            errorSaving: false
          })

          if (this.props.forceAppUpdate) {
            this.props.forceAppUpdate();
          }

          this.refs.modal.hide();
        }.bind(this),
        error: function(e) {
          var errorMsg = "";

          if (e.status === 422 && e.responseJSON) {
            var errors = e.responseJSON.errors;

            for (var i = 0; i < errors.length; i++) {
              if (i !== 0) { errorMsg += "\n\n" }

              errorMsg += errors[i]
            }
          }

          this.setState({
            changingAvatar: false,
            errorSaving: true,
            errorMsg: errorMsg
          }, function() {
            this.refs.tooltip.show();
          })
        }.bind(this)
      })

    }
  },

  //http://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata
  dataURItoBlob: function(dataURI) {
    // convert base64/URLEncoded data component to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
    else
        byteString = unescape(dataURI.split(',')[1]);

    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

    // write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }

    return new Blob([ia], {type:mimeString});
  },

  getImageDataURI: function(callback) {

    var img = new Image();
    img.onload = function() {
      var canvas = document.createElement("CANVAS");
      var ctx = canvas.getContext('2d');
        var dataURL;
        canvas.height = this.height;
        canvas.width = this.width;
        ctx.drawImage(this, 0, 0);
        dataURL = canvas.toDataURL();
        callback(dataURL);
        canvas = null;
    }

    img.crossOrigin = 'anonymous';
    img.src = this.refs.avatar_image.src
  },

  render: function() {

    var avatar;
    var loader;
    var editor_if_changeable;
    var modal_if_changeable;

    var avatarClass = "avatar";
    var loaderClass = "avatar-loading";
    var raysClass   = "avatar-loading-rays";

    var { source, size, whiteRays, changeable, ref, ...other } = this.props

    if (size === "sm") {
      avatarClass += "-sm"
      loaderClass += "-sm"
    } else if (size === "lg") {
      avatarClass += "-lg"
      loaderClass += "-lg"
    }

    if (whiteRays === true) {
      raysClass += "-white"
    }

    if (changeable === true) {

      var saveBtnClasses = classNames('small', 'button', 'radius', {
        'disabled' : this.state.changingAvatar === true,
        'alert' : this.state.errorSaving,
        'secondary' : !this.state.errorSaving
      })

      var compositeButton;

      if (this.state.changingAvatar === true) {
        var otherProps = {}

        if (this.state.saveButtonWidth) {
          otherProps.style = { width: this.state.saveButtonWidth }
        }

        var spinnerProps = {}

        if (this.state.errorSaving) {
          spinnerProps.type = "inverted"
        }

        compositeButton = <a className={saveBtnClasses} {...otherProps} ><Spinner {...spinnerProps}/></a>
      } else {
        compositeButton = <a className={saveBtnClasses} onClick={this.commandClicked} ref="save_button">{this.props.handleChange ? 'Confirm' : 'Save'}</a>
      }

      if (this.state.errorSaving) {
        compositeButton = (
          <Tooltip ref="tooltip" title={this.state.errorMsg ? this.state.errorMsg : "Something went wrong changing your avatar"} position='right'>
            {compositeButton}
          </Tooltip>
        )
      }

      avatarClass += " avatar-pointer"
      other.onClick = this.openImageChooser;
      editor_if_changeable = <input type="file" ref="photopicker" accept="image/jpeg, image/png, image/jpg" onChange={this.cropImageUI} style={{display: 'none'}} />
      modal_if_changeable = (<DropModal ref="modal" modalStyle={{borderRadius: '3'}} contentStyle={{padding: '30'}}>
        <div className="row">
          <div className="small-8 column">
            <Cropper
              aspectRatio={1 / 1}
              guides={false}
              circle
              preview='.img-preview'
              src={this.state.cropper_source}
              ref='cropper'
               />
          </div>
          <div className="small-4 column" style={{textAlign: 'center'}}>
            <div className="img-preview" style={{width: 100, height: 100, borderRadius: '50%', overflow: 'hidden', display: 'inline-block', marginBottom: '20px'}}/>
            <br/>
            {compositeButton}
          </div>
        </div>
      </DropModal>)
    }


    if (source === null || this.state.loadFailed === true) {
      avatar = <img src={"<%= asset_path('avatar_placeholder.png') %>"}
        ref="avatar_image"
        className={avatarClass}
        { ...other } />
    } else {
      if (this.state.loadSucceeded === true) {
        avatar = <img src={this.props.source}
          ref="avatar_image"
          crossOrigin="anonymous"
          className={avatarClass}
          { ...other } />
      } else {
        avatar = <img src={this.props.source} crossOrigin="anonymous" className={avatarClass} style={{display: 'none'}} onLoad={this.makeVisible} onError={this.usePlaceholder} />
        loader = (<span className={loaderClass} style={this.props.style}>
          <span className={raysClass}></span>
        </span>)
      }
    }

    return (
      <span className="avatar-wrapper">
        {avatar}
        {loader}
        {editor_if_changeable}
        {modal_if_changeable}
      </span>
    )

  }

})
